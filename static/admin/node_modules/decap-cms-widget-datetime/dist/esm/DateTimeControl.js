"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@emotion/react");
var _dayjs = _interopRequireDefault(require("dayjs"));
var _customParseFormat = _interopRequireDefault(require("dayjs/plugin/customParseFormat"));
var _localizedFormat = _interopRequireDefault(require("dayjs/plugin/localizedFormat"));
var _utc = _interopRequireDefault(require("dayjs/plugin/utc"));
var _decapCmsUiDefault = require("decap-cms-ui-default");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; } /** @jsx jsx */
_dayjs.default.extend(_customParseFormat.default);
_dayjs.default.extend(_localizedFormat.default);
_dayjs.default.extend(_utc.default);
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1tfa1p6-Buttons",
  styles: "display:flex;gap:20px;width:fit-content;label:Buttons;"
} : {
  name: "1tfa1p6-Buttons",
  styles: "display:flex;gap:20px;width:fit-content;label:Buttons;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJjIiwiZmlsZSI6Ii4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IGN1c3RvbVBhcnNlRm9ybWF0IGZyb20gJ2RheWpzL3BsdWdpbi9jdXN0b21QYXJzZUZvcm1hdCc7XG5pbXBvcnQgbG9jYWxpemVkRm9ybWF0IGZyb20gJ2RheWpzL3BsdWdpbi9sb2NhbGl6ZWRGb3JtYXQnO1xuaW1wb3J0IHV0YyBmcm9tICdkYXlqcy9wbHVnaW4vdXRjJztcbmltcG9ydCB7IGJ1dHRvbnMgfSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmRheWpzLmV4dGVuZChjdXN0b21QYXJzZUZvcm1hdCk7XG5kYXlqcy5leHRlbmQobG9jYWxpemVkRm9ybWF0KTtcbmRheWpzLmV4dGVuZCh1dGMpO1xuXG5mdW5jdGlvbiBCdXR0b25zKHsgdCwgaGFuZGxlQ2hhbmdlLCBpbnB1dEZvcm1hdCwgaXNVdGMgfSkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgIGB9XG4gICAgPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAke2J1dHRvbnMuYnV0dG9ufVxuICAgICAgICAgICR7YnV0dG9ucy53aWRnZXR9XG4gICAgICAgIGB9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKGlzVXRjID8gZGF5anMudXRjKCkuZm9ybWF0KGlucHV0Rm9ybWF0KSA6IGRheWpzKCkuZm9ybWF0KGlucHV0Rm9ybWF0KSlcbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICB7dCgnZWRpdG9yLmVkaXRvcldpZGdldHMuZGF0ZXRpbWUubm93Jyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtidXR0b25zLmJ1dHRvbn1cbiAgICAgICAgICAke2J1dHRvbnMud2lkZ2V0fVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDaGFuZ2UoJycpfVxuICAgICAgPlxuICAgICAgICB7dCgnZWRpdG9yLmVkaXRvcldpZGdldHMuZGF0ZXRpbWUuY2xlYXInKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5jbGFzcyBEYXRlVGltZUNvbnRyb2wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGZpZWxkOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZm9ySUQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xhc3NOYW1lV3JhcHBlcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHNldEFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNldEluYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlzRGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaXNEaXNhYmxlZDogZmFsc2UsXG4gIH07XG5cbiAgZ2V0Rm9ybWF0KCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZmllbGQ/LmdldCgnZm9ybWF0JykgfHwgJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTW1pdJztcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gZmllbGQ/LmdldCgnZGF0ZV9mb3JtYXQnKTtcbiAgICBjb25zdCB0aW1lRm9ybWF0ID0gZmllbGQ/LmdldCgndGltZV9mb3JtYXQnKTtcbiAgICBsZXQgaW5wdXRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbSc7XG4gICAgbGV0IGlucHV0VHlwZSA9ICdkYXRldGltZS1sb2NhbCc7XG5cbiAgICBpZiAoZGF0ZUZvcm1hdCAmJiB0aW1lRm9ybWF0KSB7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IGAke2RhdGVGb3JtYXR9VCR7dGltZUZvcm1hdH1gLCBpbnB1dFR5cGUsIGlucHV0Rm9ybWF0IH07XG4gICAgfVxuXG4gICAgaWYgKHRpbWVGb3JtYXQpIHtcbiAgICAgIGlucHV0VHlwZSA9ICd0aW1lJztcbiAgICAgIGlucHV0Rm9ybWF0ID0gJ0hIOm1tJztcbiAgICAgIHJldHVybiB7IGZvcm1hdDogdGltZUZvcm1hdCwgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9O1xuICAgIH1cblxuICAgIGlmIChkYXRlRm9ybWF0KSB7XG4gICAgICBpbnB1dFR5cGUgPSAnZGF0ZSc7XG4gICAgICBpbnB1dEZvcm1hdCA9ICdZWVlZLU1NLUREJztcbiAgICAgIHJldHVybiB7IGZvcm1hdDogZGF0ZUZvcm1hdCwgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGZvcm1hdCwgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9O1xuICB9XG5cbiAgZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZmllbGQuZ2V0KCdkZWZhdWx0Jyk7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIGlzVXRjID0gdGhpcy5wcm9wcy5maWVsZC5nZXQoJ3BpY2tlcl91dGMnKSB8fCBmYWxzZTtcbiAgaXNWYWxpZERhdGUgPSBkYXRldGltZSA9PiBkYXlqcyhkYXRldGltZSkuaXNWYWxpZCgpIHx8IGRhdGV0aW1lID09PSAnJztcbiAgZGVmYXVsdFZhbHVlID0gdGhpcy5nZXREZWZhdWx0VmFsdWUoKTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZShcbiAgICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkID8gZGF5anMoKS5mb3JtYXQoaW5wdXRGb3JtYXQpIDogdGhpcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRJbnB1dFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykgcmV0dXJuIHZhbHVlO1xuICAgIGNvbnN0IHsgZm9ybWF0LCBpbnB1dEZvcm1hdCB9ID0gdGhpcy5nZXRGb3JtYXQoKTtcbiAgICBjb25zdCBpbnB1dFZhbHVlID0gdGhpcy5pc1V0Y1xuICAgICAgPyBkYXlqcy51dGModmFsdWUsIGZvcm1hdCkuZm9ybWF0KGlucHV0Rm9ybWF0KVxuICAgICAgOiBkYXlqcyh2YWx1ZSwgZm9ybWF0KS5mb3JtYXQoaW5wdXRGb3JtYXQpO1xuXG4gICAgaWYgKHRoaXMuaXNWYWxpZERhdGUoaW5wdXRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pc1V0YyA/IGRheWpzLnV0Yyh2YWx1ZSkuZm9ybWF0KGlucHV0Rm9ybWF0KSA6IGRheWpzKHZhbHVlKS5mb3JtYXQoaW5wdXRGb3JtYXQpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlID0gZGF0ZXRpbWUgPT4ge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHJldHVybjtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGRhdGV0aW1lID09PSAnJykge1xuICAgICAgb25DaGFuZ2UoJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IGZvcm1hdCwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IGRheWpzKGRhdGV0aW1lLCBpbnB1dEZvcm1hdCkuZm9ybWF0KGZvcm1hdCk7XG4gICAgICBvbkNoYW5nZShmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9uSW5wdXRDaGFuZ2UgPSBlID0+IHtcbiAgICBjb25zdCBldHYgPSBlLnRhcmdldC52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGRheWpzKGV0dik7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UoZXR2ID09PSAnJyA/ICcnIDogbmV3VmFsdWUpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGZvcklELCB2YWx1ZSwgY2xhc3NOYW1lV3JhcHBlciwgc2V0QWN0aXZlU3R5bGUsIHNldEluYWN0aXZlU3R5bGUsIHQsIGlzRGlzYWJsZWQgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9ID0gdGhpcy5nZXRGb3JtYXQoKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xuICAgICAgICAgIGdhcDogMjBweDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBgfVxuICAgICAgPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBpZD17Zm9ySUR9XG4gICAgICAgICAgdHlwZT17aW5wdXRUeXBlfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLmZvcm1hdElucHV0VmFsdWUodmFsdWUpfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgb25Gb2N1cz17c2V0QWN0aXZlU3R5bGV9XG4gICAgICAgICAgb25CbHVyPXtzZXRJbmFjdGl2ZVN0eWxlfVxuICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAvPlxuICAgICAgICB7IWlzRGlzYWJsZWQgJiYgKFxuICAgICAgICAgIDxCdXR0b25zXG4gICAgICAgICAgICB0PXt0fVxuICAgICAgICAgICAgaGFuZGxlQ2hhbmdlPXt2ID0+IHRoaXMuaGFuZGxlQ2hhbmdlKHYpfVxuICAgICAgICAgICAgaW5wdXRGb3JtYXQ9e2lucHV0Rm9ybWF0fVxuICAgICAgICAgICAgaXNVdGM9e3RoaXMuaXNVdGN9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVRpbWVDb250cm9sO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function Buttons({
  t,
  handleChange,
  inputFormat,
  isUtc
}) {
  return (0, _react2.jsx)("div", {
    css: _ref2
  }, (0, _react2.jsx)("button", {
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.buttons.button, " ", _decapCmsUiDefault.buttons.widget, ";;label:Buttons;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0JnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCBjdXN0b21QYXJzZUZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXQnO1xuaW1wb3J0IGxvY2FsaXplZEZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vbG9jYWxpemVkRm9ybWF0JztcbmltcG9ydCB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0Yyc7XG5pbXBvcnQgeyBidXR0b25zIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5kYXlqcy5leHRlbmQoY3VzdG9tUGFyc2VGb3JtYXQpO1xuZGF5anMuZXh0ZW5kKGxvY2FsaXplZEZvcm1hdCk7XG5kYXlqcy5leHRlbmQodXRjKTtcblxuZnVuY3Rpb24gQnV0dG9ucyh7IHQsIGhhbmRsZUNoYW5nZSwgaW5wdXRGb3JtYXQsIGlzVXRjIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiAyMHB4O1xuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICBgfVxuICAgID5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtidXR0b25zLmJ1dHRvbn1cbiAgICAgICAgICAke2J1dHRvbnMud2lkZ2V0fVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgIGhhbmRsZUNoYW5nZShpc1V0YyA/IGRheWpzLnV0YygpLmZvcm1hdChpbnB1dEZvcm1hdCkgOiBkYXlqcygpLmZvcm1hdChpbnB1dEZvcm1hdCkpXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7YnV0dG9ucy5idXR0b259XG4gICAgICAgICAgJHtidXR0b25zLndpZGdldH1cbiAgICAgICAgYH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2hhbmdlKCcnKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLmNsZWFyJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpc0Rpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIGdldEZvcm1hdCgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGZpZWxkPy5nZXQoJ2Zvcm1hdCcpIHx8ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTU1taXSc7XG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IGZpZWxkPy5nZXQoJ2RhdGVfZm9ybWF0Jyk7XG4gICAgY29uc3QgdGltZUZvcm1hdCA9IGZpZWxkPy5nZXQoJ3RpbWVfZm9ybWF0Jyk7XG4gICAgbGV0IGlucHV0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW0nO1xuICAgIGxldCBpbnB1dFR5cGUgPSAnZGF0ZXRpbWUtbG9jYWwnO1xuXG4gICAgaWYgKGRhdGVGb3JtYXQgJiYgdGltZUZvcm1hdCkge1xuICAgICAgcmV0dXJuIHsgZm9ybWF0OiBgJHtkYXRlRm9ybWF0fVQke3RpbWVGb3JtYXR9YCwgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9O1xuICAgIH1cblxuICAgIGlmICh0aW1lRm9ybWF0KSB7XG4gICAgICBpbnB1dFR5cGUgPSAndGltZSc7XG4gICAgICBpbnB1dEZvcm1hdCA9ICdISDptbSc7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IHRpbWVGb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgICB9XG5cbiAgICBpZiAoZGF0ZUZvcm1hdCkge1xuICAgICAgaW5wdXRUeXBlID0gJ2RhdGUnO1xuICAgICAgaW5wdXRGb3JtYXQgPSAnWVlZWS1NTS1ERCc7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IGRhdGVGb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBmb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgfVxuXG4gIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmdldCgnZGVmYXVsdCcpO1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBpc1V0YyA9IHRoaXMucHJvcHMuZmllbGQuZ2V0KCdwaWNrZXJfdXRjJykgfHwgZmFsc2U7XG4gIGlzVmFsaWREYXRlID0gZGF0ZXRpbWUgPT4gZGF5anMoZGF0ZXRpbWUpLmlzVmFsaWQoKSB8fCBkYXRldGltZSA9PT0gJyc7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlucHV0Rm9ybWF0IH0gPSB0aGlzLmdldEZvcm1hdCgpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoXG4gICAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IGRheWpzKCkuZm9ybWF0KGlucHV0Rm9ybWF0KSA6IHRoaXMuZGVmYXVsdFZhbHVlLFxuICAgICAgICApO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0SW5wdXRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHJldHVybiB2YWx1ZTtcbiAgICBjb25zdCB7IGZvcm1hdCwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRoaXMuaXNVdGNcbiAgICAgID8gZGF5anMudXRjKHZhbHVlLCBmb3JtYXQpLmZvcm1hdChpbnB1dEZvcm1hdClcbiAgICAgIDogZGF5anModmFsdWUsIGZvcm1hdCkuZm9ybWF0KGlucHV0Rm9ybWF0KTtcblxuICAgIGlmICh0aGlzLmlzVmFsaWREYXRlKGlucHV0VmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaXNVdGMgPyBkYXlqcy51dGModmFsdWUpLmZvcm1hdChpbnB1dEZvcm1hdCkgOiBkYXlqcyh2YWx1ZSkuZm9ybWF0KGlucHV0Rm9ybWF0KTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IGRhdGV0aW1lID0+IHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZERhdGUoZGF0ZXRpbWUpKSByZXR1cm47XG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChkYXRldGltZSA9PT0gJycpIHtcbiAgICAgIG9uQ2hhbmdlKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBmb3JtYXQsIGlucHV0Rm9ybWF0IH0gPSB0aGlzLmdldEZvcm1hdCgpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXlqcyhkYXRldGltZSwgaW5wdXRGb3JtYXQpLmZvcm1hdChmb3JtYXQpO1xuICAgICAgb25DaGFuZ2UoZm9ybWF0dGVkVmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvbklucHV0Q2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgZXR2ID0gZS50YXJnZXQudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBkYXlqcyhldHYpO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlKGV0diA9PT0gJycgPyAnJyA6IG5ld1ZhbHVlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCBzZXRJbmFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPVxuICAgICAgdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcbiAgICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICAgIHR5cGU9e2lucHV0VHlwZX1cbiAgICAgICAgICB2YWx1ZT17dGhpcy5mb3JtYXRJbnB1dFZhbHVlKHZhbHVlKX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbklucHV0Q2hhbmdlfVxuICAgICAgICAgIG9uRm9jdXM9e3NldEFjdGl2ZVN0eWxlfVxuICAgICAgICAgIG9uQmx1cj17c2V0SW5hY3RpdmVTdHlsZX1cbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgICAgeyFpc0Rpc2FibGVkICYmIChcbiAgICAgICAgICA8QnV0dG9uc1xuICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIGhhbmRsZUNoYW5nZT17diA9PiB0aGlzLmhhbmRsZUNoYW5nZSh2KX1cbiAgICAgICAgICAgIGlucHV0Rm9ybWF0PXtpbnB1dEZvcm1hdH1cbiAgICAgICAgICAgIGlzVXRjPXt0aGlzLmlzVXRjfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVUaW1lQ29udHJvbDtcbiJdfQ== */")),
    onClick: () => handleChange(isUtc ? _dayjs.default.utc().format(inputFormat) : (0, _dayjs.default)().format(inputFormat))
  }, t('editor.editorWidgets.datetime.now')), (0, _react2.jsx)("button", {
    css: /*#__PURE__*/(0, _react2.css)(_decapCmsUiDefault.buttons.button, " ", _decapCmsUiDefault.buttons.widget, ";;label:Buttons;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUNnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCBjdXN0b21QYXJzZUZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXQnO1xuaW1wb3J0IGxvY2FsaXplZEZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vbG9jYWxpemVkRm9ybWF0JztcbmltcG9ydCB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0Yyc7XG5pbXBvcnQgeyBidXR0b25zIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5kYXlqcy5leHRlbmQoY3VzdG9tUGFyc2VGb3JtYXQpO1xuZGF5anMuZXh0ZW5kKGxvY2FsaXplZEZvcm1hdCk7XG5kYXlqcy5leHRlbmQodXRjKTtcblxuZnVuY3Rpb24gQnV0dG9ucyh7IHQsIGhhbmRsZUNoYW5nZSwgaW5wdXRGb3JtYXQsIGlzVXRjIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiAyMHB4O1xuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICBgfVxuICAgID5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtidXR0b25zLmJ1dHRvbn1cbiAgICAgICAgICAke2J1dHRvbnMud2lkZ2V0fVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgIGhhbmRsZUNoYW5nZShpc1V0YyA/IGRheWpzLnV0YygpLmZvcm1hdChpbnB1dEZvcm1hdCkgOiBkYXlqcygpLmZvcm1hdChpbnB1dEZvcm1hdCkpXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7YnV0dG9ucy5idXR0b259XG4gICAgICAgICAgJHtidXR0b25zLndpZGdldH1cbiAgICAgICAgYH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2hhbmdlKCcnKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLmNsZWFyJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpc0Rpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIGdldEZvcm1hdCgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGZpZWxkPy5nZXQoJ2Zvcm1hdCcpIHx8ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTU1taXSc7XG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IGZpZWxkPy5nZXQoJ2RhdGVfZm9ybWF0Jyk7XG4gICAgY29uc3QgdGltZUZvcm1hdCA9IGZpZWxkPy5nZXQoJ3RpbWVfZm9ybWF0Jyk7XG4gICAgbGV0IGlucHV0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW0nO1xuICAgIGxldCBpbnB1dFR5cGUgPSAnZGF0ZXRpbWUtbG9jYWwnO1xuXG4gICAgaWYgKGRhdGVGb3JtYXQgJiYgdGltZUZvcm1hdCkge1xuICAgICAgcmV0dXJuIHsgZm9ybWF0OiBgJHtkYXRlRm9ybWF0fVQke3RpbWVGb3JtYXR9YCwgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9O1xuICAgIH1cblxuICAgIGlmICh0aW1lRm9ybWF0KSB7XG4gICAgICBpbnB1dFR5cGUgPSAndGltZSc7XG4gICAgICBpbnB1dEZvcm1hdCA9ICdISDptbSc7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IHRpbWVGb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgICB9XG5cbiAgICBpZiAoZGF0ZUZvcm1hdCkge1xuICAgICAgaW5wdXRUeXBlID0gJ2RhdGUnO1xuICAgICAgaW5wdXRGb3JtYXQgPSAnWVlZWS1NTS1ERCc7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IGRhdGVGb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBmb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgfVxuXG4gIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmdldCgnZGVmYXVsdCcpO1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBpc1V0YyA9IHRoaXMucHJvcHMuZmllbGQuZ2V0KCdwaWNrZXJfdXRjJykgfHwgZmFsc2U7XG4gIGlzVmFsaWREYXRlID0gZGF0ZXRpbWUgPT4gZGF5anMoZGF0ZXRpbWUpLmlzVmFsaWQoKSB8fCBkYXRldGltZSA9PT0gJyc7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlucHV0Rm9ybWF0IH0gPSB0aGlzLmdldEZvcm1hdCgpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoXG4gICAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IGRheWpzKCkuZm9ybWF0KGlucHV0Rm9ybWF0KSA6IHRoaXMuZGVmYXVsdFZhbHVlLFxuICAgICAgICApO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0SW5wdXRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHJldHVybiB2YWx1ZTtcbiAgICBjb25zdCB7IGZvcm1hdCwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRoaXMuaXNVdGNcbiAgICAgID8gZGF5anMudXRjKHZhbHVlLCBmb3JtYXQpLmZvcm1hdChpbnB1dEZvcm1hdClcbiAgICAgIDogZGF5anModmFsdWUsIGZvcm1hdCkuZm9ybWF0KGlucHV0Rm9ybWF0KTtcblxuICAgIGlmICh0aGlzLmlzVmFsaWREYXRlKGlucHV0VmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaXNVdGMgPyBkYXlqcy51dGModmFsdWUpLmZvcm1hdChpbnB1dEZvcm1hdCkgOiBkYXlqcyh2YWx1ZSkuZm9ybWF0KGlucHV0Rm9ybWF0KTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IGRhdGV0aW1lID0+IHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZERhdGUoZGF0ZXRpbWUpKSByZXR1cm47XG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChkYXRldGltZSA9PT0gJycpIHtcbiAgICAgIG9uQ2hhbmdlKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBmb3JtYXQsIGlucHV0Rm9ybWF0IH0gPSB0aGlzLmdldEZvcm1hdCgpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXlqcyhkYXRldGltZSwgaW5wdXRGb3JtYXQpLmZvcm1hdChmb3JtYXQpO1xuICAgICAgb25DaGFuZ2UoZm9ybWF0dGVkVmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvbklucHV0Q2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgZXR2ID0gZS50YXJnZXQudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBkYXlqcyhldHYpO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlKGV0diA9PT0gJycgPyAnJyA6IG5ld1ZhbHVlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCBzZXRJbmFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPVxuICAgICAgdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcbiAgICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICAgIHR5cGU9e2lucHV0VHlwZX1cbiAgICAgICAgICB2YWx1ZT17dGhpcy5mb3JtYXRJbnB1dFZhbHVlKHZhbHVlKX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbklucHV0Q2hhbmdlfVxuICAgICAgICAgIG9uRm9jdXM9e3NldEFjdGl2ZVN0eWxlfVxuICAgICAgICAgIG9uQmx1cj17c2V0SW5hY3RpdmVTdHlsZX1cbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgICAgeyFpc0Rpc2FibGVkICYmIChcbiAgICAgICAgICA8QnV0dG9uc1xuICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIGhhbmRsZUNoYW5nZT17diA9PiB0aGlzLmhhbmRsZUNoYW5nZSh2KX1cbiAgICAgICAgICAgIGlucHV0Rm9ybWF0PXtpbnB1dEZvcm1hdH1cbiAgICAgICAgICAgIGlzVXRjPXt0aGlzLmlzVXRjfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVUaW1lQ29udHJvbDtcbiJdfQ== */")),
    onClick: () => handleChange('')
  }, t('editor.editorWidgets.datetime.clear')));
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "ptu1mf-DateTimeControl",
  styles: "display:flex!important;gap:20px;align-items:center;label:DateTimeControl;"
} : {
  name: "ptu1mf-DateTimeControl",
  styles: "display:flex!important;gap:20px;align-items:center;label:DateTimeControl;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUpnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCBjdXN0b21QYXJzZUZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXQnO1xuaW1wb3J0IGxvY2FsaXplZEZvcm1hdCBmcm9tICdkYXlqcy9wbHVnaW4vbG9jYWxpemVkRm9ybWF0JztcbmltcG9ydCB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0Yyc7XG5pbXBvcnQgeyBidXR0b25zIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5kYXlqcy5leHRlbmQoY3VzdG9tUGFyc2VGb3JtYXQpO1xuZGF5anMuZXh0ZW5kKGxvY2FsaXplZEZvcm1hdCk7XG5kYXlqcy5leHRlbmQodXRjKTtcblxuZnVuY3Rpb24gQnV0dG9ucyh7IHQsIGhhbmRsZUNoYW5nZSwgaW5wdXRGb3JtYXQsIGlzVXRjIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2Nzc2BcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiAyMHB4O1xuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgICBgfVxuICAgID5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtidXR0b25zLmJ1dHRvbn1cbiAgICAgICAgICAke2J1dHRvbnMud2lkZ2V0fVxuICAgICAgICBgfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgIGhhbmRsZUNoYW5nZShpc1V0YyA/IGRheWpzLnV0YygpLmZvcm1hdChpbnB1dEZvcm1hdCkgOiBkYXlqcygpLmZvcm1hdChpbnB1dEZvcm1hdCkpXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLm5vdycpfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgICR7YnV0dG9ucy5idXR0b259XG4gICAgICAgICAgJHtidXR0b25zLndpZGdldH1cbiAgICAgICAgYH1cbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2hhbmdlKCcnKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JXaWRnZXRzLmRhdGV0aW1lLmNsZWFyJyl9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuY2xhc3MgRGF0ZVRpbWVDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpc0Rpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIGdldEZvcm1hdCgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGZpZWxkPy5nZXQoJ2Zvcm1hdCcpIHx8ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTU1taXSc7XG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IGZpZWxkPy5nZXQoJ2RhdGVfZm9ybWF0Jyk7XG4gICAgY29uc3QgdGltZUZvcm1hdCA9IGZpZWxkPy5nZXQoJ3RpbWVfZm9ybWF0Jyk7XG4gICAgbGV0IGlucHV0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW0nO1xuICAgIGxldCBpbnB1dFR5cGUgPSAnZGF0ZXRpbWUtbG9jYWwnO1xuXG4gICAgaWYgKGRhdGVGb3JtYXQgJiYgdGltZUZvcm1hdCkge1xuICAgICAgcmV0dXJuIHsgZm9ybWF0OiBgJHtkYXRlRm9ybWF0fVQke3RpbWVGb3JtYXR9YCwgaW5wdXRUeXBlLCBpbnB1dEZvcm1hdCB9O1xuICAgIH1cblxuICAgIGlmICh0aW1lRm9ybWF0KSB7XG4gICAgICBpbnB1dFR5cGUgPSAndGltZSc7XG4gICAgICBpbnB1dEZvcm1hdCA9ICdISDptbSc7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IHRpbWVGb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgICB9XG5cbiAgICBpZiAoZGF0ZUZvcm1hdCkge1xuICAgICAgaW5wdXRUeXBlID0gJ2RhdGUnO1xuICAgICAgaW5wdXRGb3JtYXQgPSAnWVlZWS1NTS1ERCc7XG4gICAgICByZXR1cm4geyBmb3JtYXQ6IGRhdGVGb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBmb3JtYXQsIGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfTtcbiAgfVxuXG4gIGdldERlZmF1bHRWYWx1ZSgpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGZpZWxkLmdldCgnZGVmYXVsdCcpO1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBpc1V0YyA9IHRoaXMucHJvcHMuZmllbGQuZ2V0KCdwaWNrZXJfdXRjJykgfHwgZmFsc2U7XG4gIGlzVmFsaWREYXRlID0gZGF0ZXRpbWUgPT4gZGF5anMoZGF0ZXRpbWUpLmlzVmFsaWQoKSB8fCBkYXRldGltZSA9PT0gJyc7XG4gIGRlZmF1bHRWYWx1ZSA9IHRoaXMuZ2V0RGVmYXVsdFZhbHVlKCk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlucHV0Rm9ybWF0IH0gPSB0aGlzLmdldEZvcm1hdCgpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoXG4gICAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCA/IGRheWpzKCkuZm9ybWF0KGlucHV0Rm9ybWF0KSA6IHRoaXMuZGVmYXVsdFZhbHVlLFxuICAgICAgICApO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0SW5wdXRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHJldHVybiB2YWx1ZTtcbiAgICBjb25zdCB7IGZvcm1hdCwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRoaXMuaXNVdGNcbiAgICAgID8gZGF5anMudXRjKHZhbHVlLCBmb3JtYXQpLmZvcm1hdChpbnB1dEZvcm1hdClcbiAgICAgIDogZGF5anModmFsdWUsIGZvcm1hdCkuZm9ybWF0KGlucHV0Rm9ybWF0KTtcblxuICAgIGlmICh0aGlzLmlzVmFsaWREYXRlKGlucHV0VmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaXNVdGMgPyBkYXlqcy51dGModmFsdWUpLmZvcm1hdChpbnB1dEZvcm1hdCkgOiBkYXlqcyh2YWx1ZSkuZm9ybWF0KGlucHV0Rm9ybWF0KTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IGRhdGV0aW1lID0+IHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZERhdGUoZGF0ZXRpbWUpKSByZXR1cm47XG4gICAgY29uc3QgeyBvbkNoYW5nZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChkYXRldGltZSA9PT0gJycpIHtcbiAgICAgIG9uQ2hhbmdlKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBmb3JtYXQsIGlucHV0Rm9ybWF0IH0gPSB0aGlzLmdldEZvcm1hdCgpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXlqcyhkYXRldGltZSwgaW5wdXRGb3JtYXQpLmZvcm1hdChmb3JtYXQpO1xuICAgICAgb25DaGFuZ2UoZm9ybWF0dGVkVmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvbklucHV0Q2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgZXR2ID0gZS50YXJnZXQudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBkYXlqcyhldHYpO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlKGV0diA9PT0gJycgPyAnJyA6IG5ld1ZhbHVlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlLCBzZXRJbmFjdGl2ZVN0eWxlLCB0LCBpc0Rpc2FibGVkIH0gPVxuICAgICAgdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlucHV0VHlwZSwgaW5wdXRGb3JtYXQgfSA9IHRoaXMuZ2V0Rm9ybWF0KCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZVdyYXBwZXJ9XG4gICAgICAgIGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcbiAgICAgICAgICBnYXA6IDIwcHg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICAgIHR5cGU9e2lucHV0VHlwZX1cbiAgICAgICAgICB2YWx1ZT17dGhpcy5mb3JtYXRJbnB1dFZhbHVlKHZhbHVlKX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbklucHV0Q2hhbmdlfVxuICAgICAgICAgIG9uRm9jdXM9e3NldEFjdGl2ZVN0eWxlfVxuICAgICAgICAgIG9uQmx1cj17c2V0SW5hY3RpdmVTdHlsZX1cbiAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgLz5cbiAgICAgICAgeyFpc0Rpc2FibGVkICYmIChcbiAgICAgICAgICA8QnV0dG9uc1xuICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIGhhbmRsZUNoYW5nZT17diA9PiB0aGlzLmhhbmRsZUNoYW5nZSh2KX1cbiAgICAgICAgICAgIGlucHV0Rm9ybWF0PXtpbnB1dEZvcm1hdH1cbiAgICAgICAgICAgIGlzVXRjPXt0aGlzLmlzVXRjfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVUaW1lQ29udHJvbDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
class DateTimeControl extends _react.default.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "isUtc", this.props.field.get('picker_utc') || false);
    _defineProperty(this, "isValidDate", datetime => (0, _dayjs.default)(datetime).isValid() || datetime === '');
    _defineProperty(this, "defaultValue", this.getDefaultValue());
    _defineProperty(this, "handleChange", datetime => {
      if (!this.isValidDate(datetime)) return;
      const {
        onChange
      } = this.props;
      if (datetime === '') {
        onChange('');
      } else {
        const {
          format,
          inputFormat
        } = this.getFormat();
        const formattedValue = (0, _dayjs.default)(datetime, inputFormat).format(format);
        onChange(formattedValue);
      }
    });
    _defineProperty(this, "onInputChange", e => {
      const etv = e.target.value;
      const newValue = (0, _dayjs.default)(etv);
      this.handleChange(etv === '' ? '' : newValue);
    });
  }
  getFormat() {
    const {
      field
    } = this.props;
    const format = (field === null || field === void 0 ? void 0 : field.get('format')) || 'YYYY-MM-DDTHH:mm:ss.SSS[Z]';
    const dateFormat = field === null || field === void 0 ? void 0 : field.get('date_format');
    const timeFormat = field === null || field === void 0 ? void 0 : field.get('time_format');
    let inputFormat = 'YYYY-MM-DDTHH:mm';
    let inputType = 'datetime-local';
    if (dateFormat && timeFormat) {
      return {
        format: `${dateFormat}T${timeFormat}`,
        inputType,
        inputFormat
      };
    }
    if (timeFormat) {
      inputType = 'time';
      inputFormat = 'HH:mm';
      return {
        format: timeFormat,
        inputType,
        inputFormat
      };
    }
    if (dateFormat) {
      inputType = 'date';
      inputFormat = 'YYYY-MM-DD';
      return {
        format: dateFormat,
        inputType,
        inputFormat
      };
    }
    return {
      format,
      inputType,
      inputFormat
    };
  }
  getDefaultValue() {
    const {
      field
    } = this.props;
    const defaultValue = field.get('default');
    return defaultValue;
  }
  componentDidMount() {
    const {
      value
    } = this.props;
    const {
      inputFormat
    } = this.getFormat();
    if (value === undefined) {
      setTimeout(() => {
        this.handleChange(this.defaultValue === undefined ? (0, _dayjs.default)().format(inputFormat) : this.defaultValue);
      }, 0);
    }
  }
  formatInputValue(value) {
    if (value === '') return value;
    const {
      format,
      inputFormat
    } = this.getFormat();
    const inputValue = this.isUtc ? _dayjs.default.utc(value, format).format(inputFormat) : (0, _dayjs.default)(value, format).format(inputFormat);
    if (this.isValidDate(inputValue)) {
      return inputValue;
    }
    return this.isUtc ? _dayjs.default.utc(value).format(inputFormat) : (0, _dayjs.default)(value).format(inputFormat);
  }
  render() {
    const {
      forID,
      value,
      classNameWrapper,
      setActiveStyle,
      setInactiveStyle,
      t,
      isDisabled
    } = this.props;
    const {
      inputType,
      inputFormat
    } = this.getFormat();
    return (0, _react2.jsx)("div", {
      className: classNameWrapper,
      css: _ref
    }, (0, _react2.jsx)("input", {
      id: forID,
      type: inputType,
      value: this.formatInputValue(value),
      onChange: this.onInputChange,
      onFocus: setActiveStyle,
      onBlur: setInactiveStyle,
      disabled: isDisabled
    }), !isDisabled && (0, _react2.jsx)(Buttons, {
      t: t,
      handleChange: v => this.handleChange(v),
      inputFormat: inputFormat,
      isUtc: this.isUtc
    }));
  }
}
_defineProperty(DateTimeControl, "propTypes", {
  field: _propTypes.default.object.isRequired,
  forID: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  value: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  t: _propTypes.default.func.isRequired,
  isDisabled: _propTypes.default.bool
});
_defineProperty(DateTimeControl, "defaultProps", {
  isDisabled: false
});
var _default = exports.default = DateTimeControl;